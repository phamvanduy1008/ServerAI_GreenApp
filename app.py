from flask import Flask, request, jsonify
import os
import subprocess
import uuid
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file t·∫£i l√™n (1MB)
app.config['MAX_CONTENT_LENGTH'] = 1 * 1024 * 1024

# C·∫•u h√¨nh th∆∞ m·ª•c upload
UPLOAD_FOLDER = 'images/predict'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png'}

# T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET'])
def index():
    return jsonify({'message': 'üöÄ Flask server is deployed successfully!'})

@app.route('/predict', methods=['POST'])
def predict():
    print('Nh·∫≠n y√™u c·∫ßu d·ª± ƒëo√°n')
    
    # Ki·ªÉm tra xem c√≥ file ƒë∆∞·ª£c t·∫£i l√™n kh√¥ng
    if 'image' not in request.files:
        print('Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n')
        return jsonify({'error': 'Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n'}), 400
    
    file = request.files['image']
    
    # Ki·ªÉm tra file h·ª£p l·ªá
    if file.filename == '':
        print('Kh√¥ng ch·ªçn ·∫£nh')
        return jsonify({'error': 'Kh√¥ng ch·ªçn ·∫£nh'}), 400
    
    if not allowed_file(file.filename):
        print('ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá')
        return jsonify({'error': 'Ch·ªâ h·ªó tr·ª£ file JPEG, JPG ho·∫∑c PNG'}), 400

    # L∆∞u file v·ªõi t√™n duy nh·∫•t
    unique_filename = f"{uuid.uuid4().hex}{os.path.splitext(secure_filename(file.filename))[1]}"
    image_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
    file.save(image_path)
    print(f'·∫¢nh ƒë∆∞·ª£c t·∫£i l√™n: {image_path}')

    # Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n
    normalized_image_path = image_path.replace('\\', '/')
    command = f'python AI/predict.py "{normalized_image_path}"'
    print(f'Th·ª±c thi l·ªánh: {command}')

    try:
        # Ch·∫°y script d·ª± ƒëo√°n v·ªõi timeout 10 gi√¢y
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=10
        )

        # X√≥a ·∫£nh sau khi x·ª≠ l√Ω
        try:
            os.unlink(image_path)
            print(f'ƒê√£ x√≥a ·∫£nh: {image_path}')
        except Exception as unlink_err:
            print(f'L·ªói x√≥a ·∫£nh: {image_path}, {unlink_err}')

        # Ki·ªÉm tra l·ªói t·ª´ script
        if result.returncode != 0:
            print('L·ªói script Python:', result.stderr)
            return jsonify({'error': 'D·ª± ƒëo√°n th·∫•t b·∫°i', 'details': result.stderr}), 500

        print('K·∫øt qu·∫£ stdout:', result.stdout)
        print('K·∫øt qu·∫£ stderr:', result.stderr)

        if not result.stdout:
            print('Kh√¥ng c√≥ ƒë·∫ßu ra t·ª´ script Python')
            return jsonify({'error': 'Kh√¥ng c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n t·ª´ script'}), 500

        # Ph√¢n t√≠ch k·∫øt qu·∫£
        try:
            prediction_result = eval(result.stdout.strip())  # Gi·∫£ s·ª≠ predict.py tr·∫£ v·ªÅ dict
            print('K·∫øt qu·∫£ d·ª± ƒëo√°n:', prediction_result)
            return jsonify(prediction_result)
        except Exception as parse_err:
            print('L·ªói ph√¢n t√≠ch ƒë·∫ßu ra Python:', parse_err)
            return jsonify({'error': 'K·∫øt qu·∫£ d·ª± ƒëo√°n kh√¥ng h·ª£p l·ªá', 'details': str(parse_err)}), 500

    except subprocess.TimeoutExpired as timeout_err:
        print('H·∫øt th·ªùi gian ch·∫°y script:', timeout_err)
        try:
            os.unlink(image_path)
            print(f'ƒê√£ x√≥a ·∫£nh: {image_path}')
        except Exception as unlink_err:
            print(f'L·ªói x√≥a ·∫£nh: {image_path}, {unlink_err}')
        return jsonify({'error': 'H·∫øt th·ªùi gian d·ª± ƒëo√°n', 'details': str(timeout_err)}), 500
    except Exception as err:
        print('L·ªói kh√¥ng x√°c ƒë·ªãnh:', err)
        try:
            os.unlink(image_path)
            print(f'ƒê√£ x√≥a ·∫£nh: {image_path}')
        except Exception as unlink_err:
            print(f'L·ªói x√≥a ·∫£nh: {image_path}, {unlink_err}')
        return jsonify({'error': 'D·ª± ƒëo√°n th·∫•t b·∫°i', 'details': str(err)}), 500

if __name__ == '__main__':
    app.run(debug=False) 